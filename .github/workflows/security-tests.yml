name: 🛡️ Security Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of security test to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - fraud
          - api
          - performance
          - mobile

jobs:
  security-tests:
    name: 🔒 Security Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        test-category: 
          - security
          - fraud
          - api
          - performance
        python-version: ['3.9', '3.10', '3.11']
        include:
          - test-category: mobile
            python-version: '3.10'
            run-mobile: true
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: 🔧 Setup Test Environment
      run: |
        mkdir -p reports logs screenshots
        chmod +x run_tests.sh
        
    - name: 🏥 Health Check - Mock Server
      run: |
        # Start mock server in background
        cd mock_server && python app.py &
        SERVER_PID=$!
        
        # Wait for server to be ready
        for i in {1..30}; do
          if curl -s http://localhost:5000/health | grep -q "healthy"; then
            echo "✅ Mock server is ready"
            break
          fi
          sleep 1
        done
        
        # Keep server running for tests
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        
    - name: 🧪 Run Security Tests - ${{ matrix.test-category }}
      env:
        PYTHONPATH: .
        TEST_ENVIRONMENT: ci
        MOCK_SERVER_URL: http://localhost:5000
      run: |
        case "${{ matrix.test-category }}" in
          "security")
            ./run_tests.sh -s security
            ;;
          "fraud")
            ./run_tests.sh -s fraud
            ;;
          "api")
            ./run_tests.sh -s api
            ;;
          "performance")
            ./run_tests.sh -s performance
            ;;
          "mobile")
            # Mobile tests with mock driver (no emulator in CI)
            export USE_MOCK_DRIVER=true
            ./run_tests.sh -s mobile
            ;;
          *)
            ./run_tests.sh -s all
            ;;
        esac
        
    - name: 🔍 Security Scan - Bandit
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o reports/bandit-security-scan.json || true
        bandit -r . -f txt -o reports/bandit-security-scan.txt || true
        
    - name: 🔍 Security Scan - Safety
      run: |
        pip install safety
        safety check --json --output reports/safety-scan.json || true
        safety check --output reports/safety-scan.txt || true
        
    - name: 📊 Generate Security Summary
      if: always()
      run: |
        echo "## 🛡️ Security Test Results - ${{ matrix.test-category }}" >> $GITHUB_STEP_SUMMARY
        echo "### Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "reports/*_report.html" ]; then
          echo "✅ Test reports generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Test reports not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "reports/bandit-security-scan.txt" ]; then
          echo "### 🔍 Bandit Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -20 reports/bandit-security-scan.txt >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "reports/safety-scan.txt" ]; then
          echo "### 🔒 Safety Dependency Scan" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -10 reports/safety-scan.txt >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📤 Upload Test Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-reports-${{ matrix.test-category }}-py${{ matrix.python-version }}
        path: |
          reports/
          logs/
          screenshots/
        retention-days: 30
        
    - name: 📤 Upload Security Scans
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scans-${{ matrix.test-category }}-py${{ matrix.python-version }}
        path: |
          reports/bandit-security-scan.*
          reports/safety-scan.*
        retention-days: 30
        
    - name: 🧹 Cleanup
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID 2>/dev/null || true
        fi
        pkill -f "python.*app.py" 2>/dev/null || true

  vulnerability-scan:
    name: 🔍 Vulnerability Assessment
    runs-on: ubuntu-latest
    needs: security-tests
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy Results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  security-policy-check:
    name: 🔒 Security Policy Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ✅ Verify Security Policy
      run: |
        if [ -f "SECURITY.md" ]; then
          echo "✅ Security policy documentation found"
          wc -l SECURITY.md
        else
          echo "❌ Security policy documentation missing"
          exit 1
        fi
        
    - name: ✅ Verify Required Files
      run: |
        required_files=(
          "requirements.txt"
          "requirements-dev.txt" 
          "conftest.py"
          "pytest.ini"
          "run_tests.sh"
          "docker-compose.yml"
          "README.md"
          "SETUP_GUIDE.md"
          "SECURITY.md"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -eq 0 ]; then
          echo "✅ All required files present"
        else
          echo "❌ Missing required files: ${missing_files[*]}"
          exit 1
        fi

  performance-security-test:
    name: ⚡ Performance Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_type == 'performance')
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install locust  # For load testing
        
    - name: ⚡ Run Performance Security Tests
      run: |
        chmod +x run_tests.sh
        ./run_tests.sh -s performance
        
    - name: 📊 Performance Report
      run: |
        echo "## ⚡ Performance Security Test Results" >> $GITHUB_STEP_SUMMARY
        echo "Performance and load testing completed for security endpoints" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "reports/performance_report.html" ]; then
          echo "✅ Performance report generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ Performance report not available" >> $GITHUB_STEP_SUMMARY
        fi

  notification:
    name: 📢 Security Test Notification
    runs-on: ubuntu-latest
    needs: [security-tests, vulnerability-scan, security-policy-check]
    if: always() && (github.event_name == 'push' || github.event_name == 'schedule')
    
    steps:
    - name: 📢 Security Test Summary
      run: |
        echo "## 🛡️ Security Testing Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.security-tests.result }}" == "success" ]; then
          echo "✅ Security Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.vulnerability-scan.result }}" == "success" ]; then
          echo "✅ Vulnerability Scan: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Vulnerability Scan: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-policy-check.result }}" == "success" ]; then
          echo "✅ Security Policy Check: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Policy Check: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### 🔗 Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- Security test reports" >> $GITHUB_STEP_SUMMARY
        echo "- Vulnerability scan results" >> $GITHUB_STEP_SUMMARY
        echo "- Performance test metrics" >> $GITHUB_STEP_SUMMARY
        echo "- Security policy validation" >> $GITHUB_STEP_SUMMARY